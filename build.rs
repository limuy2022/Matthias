use chrono::{Duration, Utc};
use std::{fs, path::PathBuf};

struct AnimatedBlobs {
    name: String,
    bytes: &'static [u8],
}

struct Emojis {
    animated_blobs: Vec<AnimatedBlobs>,
}

fn main() -> Result<(), Box<dyn std::error::Error>> {
    if cfg!(target_os = "windows") {
        let mut res = winres::WindowsResource::new();
        res.set_icon("icons/main.ico");
        res.compile().unwrap();
    }

    //This will always make build_info.matthias_build update, regardless if it has been compiled (because of cargo test)
    let date = Utc::now()
        .checked_add_signed(Duration::hours(1))
        .unwrap_or_default()
        .format("%Y.%m.%d. %H:%M");
    if let Err(err) = fs::write("build_info.Matthias_build", date.to_string()) {
        println!("{err}")
    };

    generate_emoji_header()?;

    Ok(())
}

fn generate_emoji_header() -> Result<(), Box<dyn std::error::Error>> {
    let path_to_output = PathBuf::from("src/app/emoji_header.rs");
    let mut content = String::new();
    let mut emoji_types: Vec<std::ffi::OsString> = Vec::new();
    let read_dir = fs::read_dir(PathBuf::from("icons/emojis"))?;
    for entry in read_dir {
        let dir_entry = entry?;

        if dir_entry.metadata()?.is_dir() {
            let dir_name = dir_entry.file_name();

            //Push back type
            emoji_types.push(dir_name.clone());

            //Push back structs
            content.push_str(&format!(
                "pub struct {} {{ name: String, bytes: &'static [u8] }}\n",
                dir_name.into_string().unwrap()
            ));
        };
    }

    //This will be the body of the enum generated by this file
    let mut enum_inner_fields = String::new();

    for emoji_type in &emoji_types {
        enum_inner_fields.push_str(&format!(
            "\t{}({}),\n",
            emoji_type.to_string_lossy(),
            emoji_type.to_string_lossy()
        ));
    }

    //Push back final enum
    content.push_str(&format!(
        "pub enum Emoji {{
{enum_inner_fields}
}}"
    ));

    fs::write(path_to_output, content)?;
    Ok(())
}
