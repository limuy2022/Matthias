// ui.with_layout(Layout::top_down(Align::Center), |ui| {
                //     ui.allocate_ui(vec2(50., 50.), |ui| {
                //         if ui
                //             .add(egui::widgets::ImageButton::new(egui::include_image!(
                //                 "../../../icons/send_msg.png"
                //             )))
                //             .clicked()
                //             || input_keys.contains(&Keycode::Enter) && !(input_keys.contains(&Keycode::LShift) || input_keys.contains(&Keycode::RShift))
                //         {
                //             if !(self.usr_msg.trim().is_empty() || self.usr_msg.trim_end_matches('\n').is_empty()) {
                //                 let temp_msg = self.usr_msg.clone();
                //                 let tx = self.tx.clone();
                //                 let username = self.login_username.clone();
                //                 //disable pass if its not ticked
                //                 let passw = match self.req_passw {
                //                     true => self.client_password.clone(),
                //                     false => "".into(),
                //                 };
                //                 let temp_ip = self.send_on_ip.clone();
                //                 let replying_to = self.replying_to.clone();
                //                 tokio::spawn(async move {
                //                     match client::send_msg(ClientMessage::construct_normal_msg(
                //                         &temp_msg, temp_ip, passw, username, replying_to,
                //                     ))
                //                     .await
                //                     {
                //                         Ok(ok) => {
                //                             match tx.send(ok) {
                //                                 Ok(_) => {}
                //                                 Err(err) => {
                //                                     println!("{} ln 554", err);
                //                                 }
                //                             };
                //                         }
                //                         Err(err) => {
                //                             println!("ln 321 {:?}", err.source());
                //                         }
                //                     };
                //                 });
                //             }                          
                //             for file_path in self.files_to_send.clone() {
                //                 match file_path.extension().unwrap().to_string_lossy().as_str() {
                //                     "png" | "jpeg" | "bmp" | "tiff" | "webp" => {
                //                         self.send_picture(file_path);
                //                     }
                //                     _ => {
                //                         self.send_file(file_path);
                //                     }
                //                 }
                //             }
                //             //clear vectors
                //             self.files_to_send.clear();
                //             self.replying_to = None;
                //             self.usr_msg.clear();
                //         }
                //     });
                //     ui.allocate_ui(vec2(50., 50.), |ui| {
                //         if ui
                //             .add(egui::widgets::ImageButton::new(egui::include_image!(
                //                 "../../../icons/add_file.png"
                //             )))
                //             .on_hover_text("Send files")
                //             .clicked()
                //         {
                //             let files = FileDialog::new()
                //                 .set_title("Pick a file")
                //                 .set_directory("/")
                //                 .pick_file();
                //             if let Some(file) = files {
                //                 //send file
                //                 self.files_to_send.push(file);
                //             }
                //         }
                //     });
                //     ui.allocate_ui(vec2(37., 37.), |ui| {
                //         let button =
                //             ui.add(Button::new(RichText::from(&self.random_emoji).size(45.)));
                //         if button.clicked() {
                //             self.emoji_mode = !self.emoji_mode;
                //         };
                //         if button.hovered() {
                //             if !self.random_generated {
                //                 let random_number =
                //                     self.rand_eng.gen_range(0..=self.emoji.len() - 1);
                //                 self.random_emoji = self.emoji[random_number].clone();
                //                 self.random_generated = true;
                //             }
                //         } else {
                //             //check if button has been unhovered, reset variable
                //             self.random_generated = false;
                //         }
                //     });
                // });